" Basic Configuration
set nocompatible
filetype off
set shell=/bin/bash
set encoding=utf8
set mouse=a
set nonumber
set signcolumn=yes
set hlsearch
set smartindent
set autoindent
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set cursorline
set foldmethod=marker
let mapleader=';'
nnoremap <c-c> <esc>
nnoremap \ :nohlsearch<cr>
map <c-a> <nop>
map <c-q> <nop>
map q <nop>

" Plugin Manager (begin)
call plug#begin()

Plug 'google/vim-maktaba'
Plug 'google/vim-glaive'

" Project Config
Plug 'editorconfig/editorconfig-vim'

" Color Scheme
Plug 'danilo-augusto/vim-afterglow'

" Syntax Files
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-git'
Plug 'ap/vim-css-color'

" UI Display
Plug 'itchyny/lightline.vim'
Plug 'Yggdroot/indentLine'
Plug 'mhinz/vim-signify'

" Language Server
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'dense-analysis/ale'
Plug 'rhysd/vim-lsp-ale'

" Editing
Plug 'scrooloose/nerdcommenter'
Plug 'google/vim-codefmt'

" Snippets
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'garbas/vim-snipmate'
Plug 'honza/vim-snippets'

" Navigation
Plug 'othree/eregex.vim'
Plug 'andymass/vim-matchup'
Plug 'chaoren/vim-wordmotion'
Plug 'RRethy/vim-illuminate'

" Project Explorer
Plug 'lambdalisue/fern.vim'
Plug 'lambdalisue/nerdfont.vim'
Plug 'lambdalisue/fern-renderer-nerdfont.vim'

" Plugin Manager (end)
call plug#end()
call glaive#Install()

" Basic Configuration (con't)
filetype plugin indent on

" Scroll Behavior
nnoremap <c-j> 2<c-e>
nnoremap <c-k> 2<c-y>

" Color Scheme
set fillchars=vert:│
set background=dark
set termguicolors
let g:afterglow_italic_comments=1
let g:afterglow_inherit_background=1
colorscheme afterglow
highlight VertSplit guibg=NONE

" Indent Guides
set list listchars=tab:\▏\ ,trail:·
let g:indentLine_char='▏'

" Lightline
let g:lightline={
      \   'colorscheme': 'apprentice',
      \   'subseparator': {'left': '│', 'right': '│'},
      \ }
set laststatus=2
set noshowmode

" Disable conceal (who like this feature?)
let g:vim_json_syntax_conceal=0
let g:vim_markdown_conceal=0
let g:vim_markdown_conceal_code_blocks=0

" Language Server
let g:ale_linters={}
let g:ale_linters_explicit=1
let g:ale_virtualtext_cursor=0
if executable('pyls')
  autocmd User lsp_setup call lsp#register_server({
        \   'name': 'pyls',
        \   'cmd': {server_info->['pyls']},
        \   'allowlist': ['python'],
        \ })
endif

function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
  nmap <buffer> K <plug>(lsp-hover)
endfunction

augroup lsp_install
  autocmd!
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" Tab Completion
inoremap <expr><tab> pumvisible() ? '<c-n>' : '<tab>'
inoremap <expr><s-tab> pumvisible() ? '<c-p>' : '<s-tab>'
inoremap <expr><cr> pumvisible() ? asyncomplete#close_popup() : '<cr>'

" Snipmates
let g:snipMate = {
      \   'snippet_version': 1,
      \ }
imap <c-j> <plug>snipMateNextOrTrigger
smap <c-j> <plug>snipMateNextOrTrigger
imap <c-p> <plug>snipMateBack
smap <c-p> <plug>snipMateBack
imap <c-s> <plug>snipMateShow

" Navigation
let g:fern#renderer='nerdfont'
nnoremap <c-n> :Fern . -drawer -toggle<cr>

" Fix delete
set backspace=2
